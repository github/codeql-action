# Warning: This file is generated automatically, and should not be modified.
# Instead, please modify the template in the pr-checks directory and run:
#     pr-checks/sync.sh
# to regenerate this file.

name: 'PR Check - Bundle: Zstandard checks'
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO111MODULE: auto
on:
  push:
    branches:
      - main
      - releases/v*
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs: {}
  workflow_call:
    inputs: {}
defaults:
  run:
    shell: bash
concurrency:
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}
  group: ${{ github.workflow }}-${{ github.ref }}
jobs:
  bundle-zstd:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            version: linked
          - os: ubuntu-latest
            version: linked
          - os: windows-latest
            version: linked
    name: 'Bundle: Zstandard checks'
    if: github.triggering_actor != 'dependabot[bot]'
    permissions:
      contents: read
      security-events: read
    timeout-minutes: 45
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v5
      - name: Prepare test
        id: prepare-test
        uses: ./.github/actions/prepare-test
        with:
          version: ${{ matrix.version }}
          use-all-platform-bundle: 'false'
          setup-kotlin: 'true'
      - name: Remove CodeQL from toolcache
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const codeqlPath = path.join(process.env['RUNNER_TOOL_CACHE'], 'CodeQL');
            if (codeqlPath !== undefined) {
              fs.rmdirSync(codeqlPath, { recursive: true });
            }
      - id: init
        uses: ./../action/init
        with:
          languages: javascript
          tools: ${{ steps.prepare-test.outputs.tools-url }}
      - uses: ./../action/analyze
        with:
          output: ${{ runner.temp }}/results
          upload-database: false
      - name: Upload SARIF
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-zstd-bundle.sarif
          path: ${{ runner.temp }}/results/javascript.sarif
          retention-days: 7
      - name: Check diagnostic with expected tools URL appears in SARIF
        uses: actions/github-script@v8
        env:
          SARIF_PATH: ${{ runner.temp }}/results/javascript.sarif
        with:
          script: |
            const fs = require('fs');

            const sarif = JSON.parse(fs.readFileSync(process.env['SARIF_PATH'], 'utf8'));
            const run = sarif.runs[0];

            const toolExecutionNotifications = run.invocations[0].toolExecutionNotifications;
            const downloadTelemetryNotifications = toolExecutionNotifications.filter(n =>
              n.descriptor.id === 'codeql-action/bundle-download-telemetry'
            );
            if (downloadTelemetryNotifications.length !== 1) {
              core.setFailed(
                'Expected exactly one reporting descriptor in the ' +
                  `'runs[].invocations[].toolExecutionNotifications[]' SARIF property, but found ` +
                  `${downloadTelemetryNotifications.length}. All notification reporting descriptors: ` +
                  `${JSON.stringify(toolExecutionNotifications)}.`
              );
            }

            const toolsUrl = downloadTelemetryNotifications[0].properties.attributes.toolsUrl;
            console.log(`Found tools URL: ${toolsUrl}`);

            const expectedExtension = process.env['RUNNER_OS'] === 'Windows' ? '.tar.gz' : '.tar.zst';

            if (!toolsUrl.endsWith(expectedExtension)) {
              core.setFailed(
                `Expected the tools URL to be a ${expectedExtension} file, but found ${toolsUrl}.`
              );
            }
    env:
      CODEQL_ACTION_TEST_MODE: true
