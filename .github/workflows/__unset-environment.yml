# Warning: This file is generated automatically, and should not be modified.
# Instead, please modify the template in the pr-checks directory and run:
#     (cd pr-checks; pip install ruamel.yaml@0.17.31 && python3 sync.py)
# to regenerate this file.

name: PR Check - Test unsetting environment variables
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GO111MODULE: auto
  CODEQL_EXTRACTOR_JAVA_AGENT_DISABLE_KOTLIN: 'true'
on:
  push:
    branches:
      - main
      - releases/v*
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch: {}
jobs:
  unset-environment:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-12
            version: stable-v2.14.6
          - os: macos-latest
            version: stable-v2.15.5
          - os: macos-latest
            version: stable-v2.16.6
          - os: macos-latest
            version: latest
          - os: macos-latest
            version: default
          - os: macos-latest
            version: nightly-latest
    name: Test unsetting environment variables
    permissions:
      contents: read
      security-events: write
    timeout-minutes: 45
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup Python on MacOS
        uses: actions/setup-python@v5
        if: >-
          runner.os == 'macOS' && (

          matrix.version == 'stable-20230403' ||

          matrix.version == 'stable-v2.13.5' ||

          matrix.version == 'stable-v2.14.6')
        with:
          python-version: '3.11'
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Prepare test
        id: prepare-test
        uses: ./.github/actions/prepare-test
        with:
          version: ${{ matrix.version }}
          use-all-platform-bundle: 'false'
      - uses: ./../action/init
        id: init
        with:
          db-location: ${{ runner.temp }}/customDbLocation
          tools: ${{ steps.prepare-test.outputs.tools-url }}
      - uses: ./../action/.github/actions/setup-swift
        with:
          codeql-path: ${{ steps.init.outputs.codeql-path }}
      - uses: actions/setup-go@v5
        with:
          go-version: '>=1.21.0'
      - name: Build code
        shell: bash
    # Disable Kotlin analysis while it's incompatible with Kotlin 1.8, until we find a
    # workaround for our PR checks.
        run: env -i CODEQL_EXTRACTOR_JAVA_AGENT_DISABLE_KOTLIN=true PATH="$PATH" HOME="$HOME"
          ./build.sh
      - uses: ./../action/analyze
        id: analysis
        with:
          upload-database: false
      - shell: bash
        run: |
          CPP_DB="${{ fromJson(steps.analysis.outputs.db-locations).cpp }}"
          if [[ ! -d "$CPP_DB" ]] || [[ ! "$CPP_DB" == "${RUNNER_TEMP}/customDbLocation/cpp" ]]; then
            echo "::error::Did not create a database for CPP, or created it in the wrong location." \
              "Expected location was '${RUNNER_TEMP}/customDbLocation/cpp' but actual was '${CPP_DB}'"
            exit 1
          fi
          CSHARP_DB="${{ fromJson(steps.analysis.outputs.db-locations).csharp }}"
          if [[ ! -d "$CSHARP_DB" ]] || [[ ! "$CSHARP_DB" == "${RUNNER_TEMP}/customDbLocation/csharp" ]]; then
            echo "::error::Did not create a database for C Sharp, or created it in the wrong location." \
              "Expected location was '${RUNNER_TEMP}/customDbLocation/csharp' but actual was '${CSHARP_DB}'"
            exit 1
          fi
          GO_DB="${{ fromJson(steps.analysis.outputs.db-locations).go }}"
          if [[ ! -d "$GO_DB" ]] || [[ ! "$GO_DB" == "${RUNNER_TEMP}/customDbLocation/go" ]]; then
            echo "::error::Did not create a database for Go, or created it in the wrong location." \
              "Expected location was '${RUNNER_TEMP}/customDbLocation/go' but actual was '${GO_DB}'"
            exit 1
          fi
          JAVA_DB="${{ fromJson(steps.analysis.outputs.db-locations).java }}"
          if [[ ! -d "$JAVA_DB" ]] || [[ ! "$JAVA_DB" == "${RUNNER_TEMP}/customDbLocation/java" ]]; then
            echo "::error::Did not create a database for Java, or created it in the wrong location." \
              "Expected location was '${RUNNER_TEMP}/customDbLocation/java' but actual was '${JAVA_DB}'"
            exit 1
          fi
          JAVASCRIPT_DB="${{ fromJson(steps.analysis.outputs.db-locations).javascript }}"
          if [[ ! -d "$JAVASCRIPT_DB" ]] || [[ ! "$JAVASCRIPT_DB" == "${RUNNER_TEMP}/customDbLocation/javascript" ]]; then
            echo "::error::Did not create a database for Javascript, or created it in the wrong location." \
              "Expected location was '${RUNNER_TEMP}/customDbLocation/javascript' but actual was '${JAVASCRIPT_DB}'"
            exit 1
          fi
          PYTHON_DB="${{ fromJson(steps.analysis.outputs.db-locations).python }}"
          if [[ ! -d "$PYTHON_DB" ]] || [[ ! "$PYTHON_DB" == "${RUNNER_TEMP}/customDbLocation/python" ]]; then
            echo "::error::Did not create a database for Python, or created it in the wrong location." \
              "Expected location was '${RUNNER_TEMP}/customDbLocation/python' but actual was '${PYTHON_DB}'"
            exit 1
          fi
    env:
      CODEQL_ACTION_TEST_MODE: true
